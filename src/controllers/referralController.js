const Logger = require('../utils/logger');
const Affiliate = require('../models/affiliate');

class ReferralController {
    static async handleReferral(ctx) {
        try {
            const userId = ctx.from.id.toString();
            Logger.info(`Handling referral request for user ${userId}`);

            // Ki·ªÉm tra affiliate hi·ªán t·∫°i
            const affiliate = await Affiliate.findByUserId(userId);
            if (affiliate) {
                const message = `üìä Th√¥ng tin gi·ªõi thi·ªáu c·ªßa b·∫°n:\n\n` +
                            `üîó Link gi·ªõi thi·ªáu:\n${affiliate.aff_link}\n\n` +
                            `üí∞ Hoa h·ªìng hi·ªán t·∫°i: ${affiliate.commission.toLocaleString()}ƒë\n` +
                            `üë• S·ªë ng∆∞·ªùi gi·ªõi thi·ªáu: ${affiliate.total_referrals}\n` +
                            `üìä T·ªïng hoa h·ªìng: ${affiliate.total_commission.toLocaleString()}ƒë`;
                
                await ctx.reply(message);
                return;
            }

            // Hi·ªÉn th·ªã l·ªùi ch√†o v√† n√∫t C√≥/Kh√¥ng n·∫øu ch∆∞a c√≥ affiliate
            const welcomeMessage = 'üëã Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi Ch∆∞∆°ng tr√¨nh Gi·ªõi thi·ªáu!\n\n' +
                                 'B·∫°n c√≥ mu·ªën k√≠ch ho·∫°t t√≠nh nƒÉng n√†y kh√¥ng?\n\n' +
                                 '‚ÑπÔ∏è Sau khi k√≠ch ho·∫°t, b·∫°n c√≥ th·ªÉ:\n' +
                                 '‚Ä¢ Nh·∫≠n hoa h·ªìng khi gi·ªõi thi·ªáu ng∆∞·ªùi d√πng m·ªõi\n' +
                                 '‚Ä¢ T·ª± ƒë·ªông nh·∫≠n % t·ª´ giao d·ªãch c·ªßa ng∆∞·ªùi ƒë∆∞·ª£c gi·ªõi thi·ªáu\n' +
                                 '‚Ä¢ R√∫t ti·ªÅn hoa h·ªìng v·ªÅ t√†i kho·∫£n ng√¢n h√†ng';
            
            await ctx.reply(welcomeMessage, {
                reply_markup: {
                    inline_keyboard: [
                        [
                            { text: '‚úÖ C√≥', callback_data: 'activate_referral' },
                            { text: '‚ùå Kh√¥ng', callback_data: 'cancel_referral' }
                        ]
                    ]
                }
            });

        } catch (error) {
            Logger.error('Referral handler error:', error);
            await ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }

    static async handleActivation(ctx) {
        try {
            const userId = ctx.from.id.toString();

            // Ki·ªÉm tra xem user ƒë√£ c√≥ affiliate ch∆∞a
            const existingAffiliate = await Affiliate.findByUserId(userId);
            if (existingAffiliate) {
                await ctx.editMessageText('‚ùå B·∫°n ƒë√£ k√≠ch ho·∫°t t√≠nh nƒÉng gi·ªõi thi·ªáu r·ªìi.');
                return;
            }

            // T·∫°o m√£ gi·ªõi thi·ªáu ƒë·ªôc nh·∫•t
            let affCode;
            let isUnique = false;
            while (!isUnique) {
                affCode = this.generateAffCode();
                const existing = await Affiliate.findByAffCode(affCode);
                if (!existing) {
                    isUnique = true;
                }
            }

            // T·∫°o link gi·ªõi thi·ªáu
            const affLink = `https://t.me/tikupprobot?start=${affCode}`;

            // T·∫°o affiliate m·ªõi trong database
            const newAffiliate = await Affiliate.create({
                user_id: userId,
                aff_code: affCode,
                aff_link: affLink,
                commission: 0,
                total_commission: 0,
                total_referrals: 0,
                commission_rate: this.getCommissionRate(),
                status: 'active'
            });

            Logger.info(`Created new affiliate for user ${userId}:`, newAffiliate);

            // Th√¥ng b√°o th√†nh c√¥ng v√† h∆∞·ªõng d·∫´n
            const message = `‚úÖ K√≠ch ho·∫°t t√≠nh nƒÉng gi·ªõi thi·ªáu th√†nh c√¥ng!\n\n` +
                          `üîó Link gi·ªõi thi·ªáu c·ªßa b·∫°n:\n${affLink}\n\n` +
                          `üí∞ Ch√≠nh s√°ch hoa h·ªìng:\n` +
                          `‚Ä¢ Nh·∫≠n ngay ${this.getCommissionRate()}% t·ª´ gi√° tr·ªã n·∫°p ti·ªÅn\n` +
                          `‚Ä¢ Kh√¥ng gi·ªõi h·∫°n s·ªë l∆∞·ª£ng gi·ªõi thi·ªáu\n` +
                          `‚Ä¢ R√∫t ti·ªÅn v·ªÅ t√†i kho·∫£n ng√¢n h√†ng 24/7\n\n` +
                          `üí° V√†o üë´ Referral ƒë·ªÉ xem th√¥ng tin chi ti·∫øt v√† qu·∫£n l√Ω`;

            await ctx.editMessageText(message);

        } catch (error) {
            Logger.error('Activation error:', error);
            await ctx.editMessageText('‚ùå C√≥ l·ªói x·∫£y ra khi k√≠ch ho·∫°t. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }

    static async handleCancel(ctx) {
        try {
            await ctx.editMessageText('üö´ ƒê√£ h·ªßy k√≠ch ho·∫°t t√≠nh nƒÉng gi·ªõi thi·ªáu');
        } catch (error) {
            Logger.error('Cancel handler error:', error);
            await ctx.reply('‚ùå C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i sau.');
        }
    }

    static generateAffCode(length = 6) {
        const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
        let code = '';
        for (let i = 0; i < length; i++) {
            code += chars.charAt(Math.floor(Math.random() * chars.length));
        }
        return code;
    }

    static getCommissionRate() {
        return 5;
    }
}

module.exports = ReferralController;