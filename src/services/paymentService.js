// const User = require('../models/user');
// const Transaction = require('../models/transaction');
// const Logger = require('../utils/logger');
// const bot = require('../config/telegram');
// const MainMenu = require('../keyboards/mainMenu');

// class PaymentService {
//     static async processDeposit(webhookData) {
//         try {
//             if (webhookData.error !== 0 || !webhookData.data || !webhookData.data.length) {
//                 throw new Error('Invalid webhook data');
//             }

//             for (const tx of webhookData.data) {
//                 try {
//                     const {
//                         tid,
//                         description,
//                         amount,
//                         when,
//                         bankName,
//                         corresponsiveName,
//                         corresponsiveAccount
//                     } = tx;

//                     // Tr√≠ch xu·∫•t userId t·ª´ description
//                     const userId = description.match(/TIKUP(\d+)/i)?.[1];
//                     if (!userId) {
//                         Logger.warn('Invalid transaction description', { description });
//                         continue;
//                     }

//                     // Ki·ªÉm tra giao d·ªãch ƒë√£ x·ª≠ l√Ω ch∆∞a
//                     const existingTx = await Transaction.findOne({ tid });
//                     if (existingTx?.status === 'completed') {
//                         Logger.info('Transaction already processed', { tid });
//                         continue;
//                     }

//                     // T√¨m pending transaction g·∫ßn nh·∫•t c·ªßa user v·ªõi s·ªë ti·ªÅn t∆∞∆°ng ·ª©ng
//                     const pendingTx = await Transaction.findOne({
//                         userId,
//                         amount: parseFloat(amount),
//                         status: 'Pending'
//                     }).sort({ createdAt: -1 });

//                     let transaction;
//                     let qrMessageId;

//                     if (pendingTx) {
//                         // C·∫≠p nh·∫≠t pending transaction
//                         qrMessageId = pendingTx.qrMessageId;
//                         transaction = await Transaction.findByIdAndUpdate(
//                             pendingTx._id,
//                             {
//                                 tid,
//                                 transactionId: tid,
//                                 bankName,
//                                 timestamp: when,
//                                 status: 'completed'
//                             },
//                             { new: true }
//                         );
//                     } else {
//                         // T·∫°o transaction m·ªõi n·∫øu kh√¥ng t√¨m th·∫•y pending
//                         transaction = await Transaction.create({
//                             tid,
//                             transactionId: tid,
//                             userId,
//                             amount: parseFloat(amount),
//                             description,
//                             bankName,
//                             senderName: corresponsiveName,
//                             senderAccount: corresponsiveAccount,
//                             timestamp: when,
//                             status: 'completed',
//                             type: 'deposit'
//                         });
//                     }

//                     // C·∫≠p nh·∫≠t s·ªë d∆∞ user
//                     const updatedBalance = await User.updateBalance(userId, parseFloat(amount));

//                     // Process commission for upline
//                     const commission = await User.processCommission(
//                         transaction.id,
//                         userId,
//                         parseFloat(amount)
//                     );

//                     // If commission was processed, notify upline
//                     if (commission) {
//                         try {
//                             await bot.telegram.sendMessage(
//                                 commission.uplineId,
//                                 `üí∞ <b>NH·∫¨N HOA H·ªíNG</b>\n\n` +
//                                 `B·∫°n nh·∫≠n ƒë∆∞·ª£c <b>${commission.commissionAmount.toLocaleString()}ƒë</b>\n` +
//                                 `t·ª´ giao d·ªãch n·∫°p ti·ªÅn c·ªßa downline\n` +
//                                 `T·ª∑ l·ªá hoa h·ªìng: ${commission.rate}%`,
//                                 { parse_mode: 'HTML' }
//                             );
//                         } catch (error) {
//                             Logger.error('Error sending commission notification:', error);
//                         }
//                     }

//                     // G·ª≠i th√¥ng b√°o theo th·ª© t·ª±
//                     try {
//                         // 1. C·∫≠p nh·∫≠t tin nh·∫Øn QR n·∫øu c√≥
//                         if (qrMessageId) {
//                             try {
//                                 await bot.telegram.editMessageCaption(
//                                     userId,
//                                     qrMessageId,
//                                     undefined,
//                                     `‚úÖ THANH TO√ÅN TH√ÄNH C√îNG\n\n` +
//                                     `üí∞ S·ªë ti·ªÅn: +${amount.toLocaleString()}ƒë\n` +
//                                     `üíµ S·ªë d∆∞ m·ªõi: ${updatedBalance.balance.toLocaleString()}ƒë`,
//                                     { 
//                                         parse_mode: 'HTML',
//                                         reply_markup: { inline_keyboard: [] }
//                                     }
//                                 );
//                             } catch (err) {
//                                 Logger.error('Error updating QR message:', err);
//                             }
//                         }

//                         // 2. G·ª≠i th√¥ng b√°o chi ti·∫øt
//                         await bot.telegram.sendMessage(
//                             userId,
//                             `‚úÖ <b>GIAO D·ªäCH TH√ÄNH C√îNG</b>\n\n` +
//                             `üí∞ S·ªë ti·ªÅn: +${amount.toLocaleString()}ƒë\n` +
//                             `üí≥ M√£ GD: <code>${tid}</code>\n` +
//                             `üè¶ Ng√¢n h√†ng: ${bankName}\n` +
//                             `üë§ Ng∆∞·ªùi g·ª≠i: ${corresponsiveName}\n` +
//                             `‚åõÔ∏è Th·ªùi gian: ${new Date(when).toLocaleString('vi-VN')}\n` +
//                             `üíµ S·ªë d∆∞ hi·ªán t·∫°i: ${updatedBalance.balance.toLocaleString()}ƒë\n\n` +
//                             `üéâ C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•!`,
//                             { parse_mode: 'HTML' }
//                         );

//                         // 3. Quay v·ªÅ menu ch√≠nh
//                         await bot.telegram.sendMessage(
//                             userId,
//                             'üëã Giao d·ªãch ho√†n t·∫•t. Quay l·∫°i menu ch√≠nh:',
//                             MainMenu.getMainMenuKeyboard()
//                         );

//                         Logger.transaction('Deposit completed', {
//                             userId,
//                             amount,
//                             tid,
//                             bankName,
//                             senderName: corresponsiveName
//                         });
//                     } catch (error) {
//                         Logger.error('Error sending notifications:', error);
//                     }
//                 } catch (error) {
//                     Logger.error('Error processing transaction', {
//                         error: error.message,
//                         transaction: tx
//                     });
//                     continue;
//                 }
//             }

//             return { success: true };
//         } catch (error) {
//             Logger.error('Webhook processing error:', error);
//             throw error;
//         }
//     }
// }

// module.exports = PaymentService;
